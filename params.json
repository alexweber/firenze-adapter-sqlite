{"name":"firenze-adapter-sqlite","tagline":"SQLite adapter for firenze.js","body":"# firenze-adapter-sqlite\r\n\r\n[![Build Status](https://travis-ci.org/alexweber/firenze-adapter-sqlite.svg?branch=master)](https://travis-ci.org/alexweber/firenze-adapter-sqlite) [![Coverage Status](https://coveralls.io/repos/alexweber/firenze-adapter-sqlite/badge.svg)](https://coveralls.io/r/alexweber/firenze-adapter-sqlite) [![npm](https://img.shields.io/npm/v/firenze-adapter-sqlite.svg)](https://www.npmjs.com/package/firenze-adapter-sqlite) [![Join the chat at https://gitter.im/fahad19/firenze](https://img.shields.io/badge/gitter-join_chat_%E2%86%92-1dce73.svg)](https://gitter.im/fahad19/firenze)\r\n\r\nSQLite adapter for [firenze.js](https://github.com/fahad19/firenze)\r\n\r\nInstall it with npm: `npm install --save firenze-adapter-sqlite`\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n# Contents\r\n\r\n- [Install](#install)\r\n- [Usage](#usage)\r\n- [Schema](#schema)\r\n- [Finders](#finders)\r\n  - [first](#first)\r\n  - [all](#all)\r\n  - [list](#list)\r\n  - [count](#count)\r\n- [Complex conditions](#complex-conditions)\r\n  - [equals](#equals)\r\n  - [in list](#in-list)\r\n  - [comparisons](#comparisons)\r\n  - [AND](#and)\r\n  - [OR](#or)\r\n  - [NOT](#not)\r\n- [Order](#order)\r\n- [Group](#group)\r\n- [Fields](#fields)\r\n- [Limit (pagination)](#limit-pagination)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n<!--docume:src/index.js-->\r\n## Install\r\n\r\n```\r\n$ npm install --save firenze-adapter-sqlite\r\n```\r\n\r\n## Usage\r\n\r\nYou aren't expected to deal with the Adapter directly. Just pass the adapter to Database config when you create an instance.\r\n\r\n```js\r\nvar f = require('firenze');\r\nvar Database = f.Database;\r\nvar SqliteAdapter = require('firenze-adapter-sqlite');\r\n\r\nvar db = new Database({\r\n  adapter: SqliteAdapter,\r\n  filename: 'my_database.sqlite'\r\n});\r\n```\r\n\r\n## Schema\r\n\r\nWhen defining a Model's schema, you need to pass option for each column's `type`.\r\n\r\nHere are the supported types from this adapter:\r\n\r\n* increments\r\n* integer\r\n* bigInteger\r\n* text\r\n* string\r\n* float\r\n* decimal\r\n* boolean\r\n* date\r\n* dateTime\r\n* uuid\r\n\r\nExample:\r\n\r\n```js\r\nvar Post = db.createModelClass({\r\n  schema: {\r\n    id: {\r\n      type: 'increments'\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Finders\r\n\r\nExamples below assumes you have an instance of Collection already:\r\n\r\n```js\r\nvar posts = new Posts();\r\n```\r\n\r\n### first\r\n\r\nGives you the first matched result:\r\n\r\n```js\r\nposts.find('first', {\r\n  conditions: {\r\n    id: 1\r\n  }\r\n}).then(function (post) {\r\n  // post is now an instance of Post model\r\n  var title = post.get('title');\r\n});\r\n```\r\n\r\n### all\r\n\r\nGives you all matched results:\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    published: true\r\n  }\r\n}).then(function (models) {\r\n  models.forEach(function (model) {\r\n    var title = model.get('title');\r\n  });\r\n});\r\n```\r\n### list\r\n\r\nGives you a list of key/value paired object of matched results:\r\n\r\n```js\r\nposts.find('list', {\r\n  conditions: {},\r\n  fields: [\r\n    'id',\r\n    'title'\r\n  ]\r\n}).then(function (list) {\r\n  // list is now:\r\n  //\r\n  // {\r\n  //   1: 'Hello World',\r\n  //   2: 'About'\r\n  // }\r\n});\r\n```\r\n\r\n### count\r\n\r\nGives you the total count of matched results:\r\n\r\n```js\r\nposts.find('count').then(function (count) {\r\n  // count is an integer here\r\n});\r\n```\r\n\r\n## Complex conditions\r\n\r\n### equals\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    id: 1\r\n  }\r\n});\r\n```\r\n\r\n### in list\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    id: [\r\n      1,\r\n      2,\r\n      3\r\n    ]\r\n  }\r\n});\r\n```\r\n\r\n### comparisons\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    'Post.rating >': 3\r\n  }\r\n})\r\n```\r\n\r\nExample comparisons that you can try:\r\n\r\n* greater than `ModelAlias.field >`\r\n* greater than or equel to `ModelAlias.field >=`\r\n* less than `ModelAlias.field <`\r\n* less than or equal to `ModelAlias.field <=`\r\n* not equal to `ModelAlias.field !=`\r\n\r\n### AND\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    AND: {\r\n      'Post.published': 1\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### OR\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    OR: {\r\n      'Post.published': 1\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### NOT\r\n\r\n```js\r\nposts.find('all', {\r\n  conditions: {\r\n    NOT: {\r\n      'Post.published': 1\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Order\r\n\r\nFor ordering results:\r\n\r\n```js\r\nposts.find('all', {\r\n  order: {\r\n    'Post.title': 'asc'\r\n  }\r\n});\r\n```\r\n\r\n## Group\r\n\r\nFor grouping result set:\r\n\r\n```js\r\nposts.find('all', {\r\n  group: [\r\n    'column_name'\r\n  ]\r\n});\r\n```\r\n\r\n## Fields\r\n\r\nSelect only a number of fields:\r\n\r\n```js\r\nposts.find('all', {\r\n  fields: [\r\n    'id',\r\n    'title'\r\n  ]\r\n});\r\n```\r\n\r\n## Limit (pagination)\r\n\r\nLimit number of results:\r\n\r\n```js\r\nposts.find('all', {\r\n  limit: 10\r\n});\r\n```\r\n\r\nIf you want to go through paginated results:\r\n\r\n```js\r\nposts.find('all', {\r\n  limit: 10,\r\n  page: 2\r\n})\r\n```\r\n\r\n<!--/docume:src/index.js-->\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}